/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import interfaces.InterfaceExercicio;
import interfaces.InterfaceFicha;
import interfaces.InterfaceFicha_Exercicio;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Exercicio;
import model.Ficha;
import model.Ficha_Exercicio;

/**
 *
 * @author arauj
 */
public class ManipularFichaExercicio extends javax.swing.JInternalFrame {

    /**
     * Creates new form ManipularFichaExercicio
     */
    String ip = "127.0.0.1";
    public ManipularFichaExercicio() {
        initComponents();
        this.listarFicha();
        this.listarExercicio();
        txtID2.setEditable(false);
    }
    
    public void listarFicha(){
        DefaultTableModel modelo = (DefaultTableModel)tabelaFicha.getModel();
        modelo.setNumRows(0);
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha clienteServico =(InterfaceFicha) conexao.lookup("ficha"); 
            
            for(Ficha f: clienteServico.selecionarTodasFichas()){
                modelo.addRow(new Object[]{
                    f.getId_ficha(),
                    f.getCliente().getNome(),
                    f.getFuncionario().getNome(),
                    f.getData_inicio(),
                    f.getData_termino()
                });
            }
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        } 
    }
    
    public void listarExercicio(){
        DefaultTableModel modelo = (DefaultTableModel)tableExercicio.getModel();
        modelo.setNumRows(0);
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceExercicio exercicioServico =(InterfaceExercicio) conexao.lookup("exercicio"); 

            for(Exercicio e: exercicioServico.selecionarTodosExercicio()){
                modelo.addRow(new Object[]{      
                e.getId_ex(),
                e.getNome(),
                e.getGrupo_musc(),
                });
            }
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        } 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaFicha = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableExercicio = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtSeries = new javax.swing.JTextField();
        txtPeso = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnInserir = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnListar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtID2 = new javax.swing.JTextField();
        jcbHabilitarEdicao = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        txtRepeticoes = new javax.swing.JTextField();

        setClosable(true);

        tabelaFicha.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cliente", "Funcionario", "Data de Inicio", "Data de Termino"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaFicha);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel1.setText("Selecione a Ficha");

        tableExercicio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Grupo Muscular"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableExercicio);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel2.setText("Selecione os Exercicios");

        txtSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeriesActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel3.setText("Series");

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel4.setText("Peso");

        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnListar.setText("Listar");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel5.setText("ID");

        txtID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtID2ActionPerformed(evt);
            }
        });

        jcbHabilitarEdicao.setText("Habilitar Edição/Exclusão");
        jcbHabilitarEdicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbHabilitarEdicaoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel6.setText("Repetições");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSeries)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRepeticoes, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                        .addGap(645, 645, 645))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jcbHabilitarEdicao, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(220, 220, 220))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInserir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeticoes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcbHabilitarEdicao)
                        .addComponent(txtID2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        setBounds(0, 0, 805, 490);
    }// </editor-fold>//GEN-END:initComponents

    private void txtID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtID2ActionPerformed
        /*
         int linhaInicial, linhaFinal = 0;
         tabela.setRowSelectionInterval(linhaInicial, linhaFinal );
        */
        if(!txtID2.getText().equals("")){
            Registry conexao;
            try{
                conexao = LocateRegistry.getRegistry(ip,1100);
                InterfaceFicha_Exercicio fichaExercicioServico =(InterfaceFicha_Exercicio) conexao.lookup("fichaExercicio");
                InterfaceFicha fichaServico =(InterfaceFicha) conexao.lookup("ficha");
                int digitado = Integer.parseInt(txtID2.getText());
                for(Ficha_Exercicio fichaExercicio : fichaExercicioServico.selecionarFichaExercicio(digitado)){
                    if(digitado == fichaExercicio.getId_ficha_exercicio()){

                        /*
                        for(Ficha ficha : fichaServico.selecionarTodasFichas()){
                            if(tabelaFicha != null){
                                for(int i =0; i < tabelaFicha.getRowCount();i++){
                                   if(ficha.getId_ficha() == (int) tabelaFicha.getValueAt(i, 1)){
                                       tabelaFicha.setRowSelectionInterval(i, i );
                                    } 
                                }
                                
                            }
                        }
                        */

                        txtPeso.setText(String.valueOf(fichaExercicio.getPeso()));
                        txtSeries.setText(String.valueOf(fichaExercicio.getSeries()));
                        txtRepeticoes.setText(String.valueOf(fichaExercicio.getRepeticoes()));
                    } 
                    
                }
            }catch (RemoteException erro){
                System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
            }catch(NotBoundException erro){
                System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
            }
        }
        
    }//GEN-LAST:event_txtID2ActionPerformed

    private void jcbHabilitarEdicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbHabilitarEdicaoActionPerformed
        if(jcbHabilitarEdicao.isSelected()){
            txtID2.setEditable(true);
        }else{
            txtID2.setEditable(false);
            limparCampos();
        }
    }//GEN-LAST:event_jcbHabilitarEdicaoActionPerformed

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        int id_ficha =  (int) tabelaFicha.getValueAt(tabelaFicha.getSelectedRow(),0);
        int id_exercicio =  (int) tableExercicio.getValueAt(tableExercicio.getSelectedRow(),0);
        Registry conexao;
        try {
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha_Exercicio fichaExercicioServico =(InterfaceFicha_Exercicio) conexao.lookup("fichaExercicio");
            Ficha_Exercicio fe = new Ficha_Exercicio();
            
            Ficha ficha = new Ficha();
            ficha.setId_ficha(id_ficha);
            
            Exercicio exercicio = new Exercicio();
            exercicio.setId_ex(id_exercicio);
            
            fe.setFicha(ficha);
            fe.setExercicio(exercicio);
            fe.setSeries(Integer.parseInt(txtSeries.getText()));
            fe.setPeso(Integer.parseInt(txtPeso.getText()));
            fe.setRepeticoes(Integer.parseInt(txtRepeticoes.getText()));
            
            JOptionPane.showMessageDialog(this, fichaExercicioServico.inserirFichaExercicio(fe));
            limparCampos();
            
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        } 
    }//GEN-LAST:event_btnInserirActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha_Exercicio fichaExercicioServico =(InterfaceFicha_Exercicio) conexao.lookup("fichaExercicio"); 
            JOptionPane.showMessageDialog(this, fichaExercicioServico.excluirFichaExercicio(Integer.parseInt(txtID2.getText())));
            limparCampos();
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        } 
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
        ListaFichaExercicio listaExercicio = new ListaFichaExercicio();
        getParent().add(listaExercicio);
        listaExercicio.setVisible(true);
    }//GEN-LAST:event_btnListarActionPerformed

    private void txtSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeriesActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
       Registry conexao;
       int id_ficha =  (int) tabelaFicha.getValueAt(tabelaFicha.getSelectedRow(),0);
       int id_exercicio =  (int) tableExercicio.getValueAt(tableExercicio.getSelectedRow(),0);
        try {
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha_Exercicio fichaExercicioServico =(InterfaceFicha_Exercicio) conexao.lookup("fichaExercicio"); 
            Ficha_Exercicio fichaExercicio = new Ficha_Exercicio();
            
            Ficha ficha = new Ficha();
            ficha.setId_ficha(id_ficha);
            Exercicio exercicio = new Exercicio();
            exercicio.setId_ex(id_exercicio);
            
            fichaExercicio.setId_ficha_exercicio(Integer.parseInt(txtID2.getText()));
            fichaExercicio.setFicha(ficha);
            fichaExercicio.setExercicio(exercicio);
            fichaExercicio.setSeries(Integer.parseInt(txtSeries.getText()));
            fichaExercicio.setPeso(Integer.parseInt(txtPeso.getText()));
            fichaExercicio.setRepeticoes(Integer.parseInt(txtRepeticoes.getText()));

            JOptionPane.showMessageDialog(this, fichaExercicioServico.editarFichaExercicio(fichaExercicio));
            limparCampos();

        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnListar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jcbHabilitarEdicao;
    private javax.swing.JTable tabelaFicha;
    private javax.swing.JTable tableExercicio;
    private javax.swing.JTextField txtID2;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtRepeticoes;
    private javax.swing.JTextField txtSeries;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        tabelaFicha.getSelectionModel().clearSelection();
        tableExercicio.getSelectionModel().clearSelection();
        txtID2.setText("");
        txtSeries.setText("");
        txtPeso.setText("");
        txtRepeticoes.setText("");
    }
}
