/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import interfaces.InterfaceCliente;
import interfaces.InterfaceFicha;
import interfaces.InterfaceFuncionario;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import javax.swing.JOptionPane;
import model.Cliente;
import model.Ficha;
import model.Funcionario;

/**
 *
 * @author arauj
 */
public class ManipularFicha extends javax.swing.JInternalFrame {

    /**
     * Creates new form ManipularFicha
     */
    String ip = "127.0.0.1";
    public ManipularFicha() {
        initComponents();
        txtID.setEditable(false);
        this.carregarClientes();
        this.carregarFuncionarios();
    }
    
    public void verificaCadastro(){
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDataInicio = new javax.swing.JTextField();
        txtDataTermino = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jcbHabilitarEdicao = new javax.swing.JCheckBox();
        btnExercicios = new javax.swing.JButton();

        setClosable(true);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel1.setText("Cliente");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 210, 48, 30);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel2.setText("Responsavel");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(200, 210, 90, 30);

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel3.setText("Data de Inicio");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(420, 210, 110, 30);

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel4.setText("Data de Termino");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(420, 250, 130, 30);
        getContentPane().add(txtDataInicio);
        txtDataInicio.setBounds(520, 210, 120, 30);
        getContentPane().add(txtDataTermino);
        txtDataTermino.setBounds(540, 250, 100, 30);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar..." }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1);
        jComboBox1.setBounds(80, 210, 110, 30);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar..." }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2);
        jComboBox2.setBounds(300, 210, 110, 30);

        jButton1.setText("Cadastrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(110, 330, 130, 31);

        jButton2.setText("Editar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(250, 330, 130, 31);

        jButton3.setText("Excluir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(390, 330, 130, 31);

        jButton5.setText("Listar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(530, 330, 130, 31);

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 14)); // NOI18N
        jLabel5.setText("ID");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 150, 15, 30);

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        getContentPane().add(txtID);
        txtID.setBounds(40, 150, 60, 30);

        jcbHabilitarEdicao.setText("Habilitar Edição/Exclusão");
        jcbHabilitarEdicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbHabilitarEdicaoActionPerformed(evt);
            }
        });
        getContentPane().add(jcbHabilitarEdicao);
        jcbHabilitarEdicao.setBounds(110, 150, 200, 23);

        btnExercicios.setText("Cadastrar Exercicios");
        btnExercicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExerciciosActionPerformed(evt);
            }
        });
        getContentPane().add(btnExercicios);
        btnExercicios.setBounds(13, 393, 740, 30);

        setBounds(0, 0, 780, 459);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Registry conexao;
        Cliente cliente = new Cliente();
        Funcionario funcionario = new Funcionario();
        Ficha ficha = new Ficha();
        String nomeCliente = jComboBox1.getSelectedItem().toString();
        String nomeFuncionario = jComboBox2.getSelectedItem().toString();
        
        try {
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceCliente clienteServico =(InterfaceCliente) conexao.lookup("cliente"); 
            for(Cliente c: clienteServico.selecionarTodosClientes()){
                if(c.getNome().equals(nomeCliente)){
                    cliente.setId_cli(c.getId_cli());
                }
            }
            InterfaceFuncionario funcionarioServico =(InterfaceFuncionario) conexao.lookup("funcionario"); 
            for(Funcionario f: funcionarioServico.selecionarTodosFuncionarios()){
                if(f.getNome().equals(nomeFuncionario)){
                    funcionario.setId_fun(f.getId_fun());
                }
            }
            
            InterfaceFicha fichaServico =(InterfaceFicha) conexao.lookup("ficha");
            ficha.setCliente(cliente);
            ficha.setFuncionario(funcionario);
            ficha.setData_inicio(txtDataInicio.getText());
            ficha.setData_termino(txtDataTermino.getText());
            
            JOptionPane.showMessageDialog(this,fichaServico.inserirFicha(ficha));
            limparCampos();

        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Registry conexao;
        try {
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha fichaServico =(InterfaceFicha) conexao.lookup("ficha");
            InterfaceCliente clienteServico =(InterfaceCliente) conexao.lookup("cliente"); 
            InterfaceFuncionario funcionarioServico =(InterfaceFuncionario) conexao.lookup("funcionario"); 
            String clienteNome = jComboBox1.getSelectedItem().toString();
            String funcionarioNome = jComboBox2.getSelectedItem().toString();
            
            //Cliente
            Cliente cliente = new Cliente();
            for(Cliente c: clienteServico.selecionarTodosClientes()){
                if(clienteNome.equals(c.getNome())){
                    cliente.setId_cli(c.getId_cli());
                }
            }
            
            //Funcionario
            Funcionario funcionario = new Funcionario();
            for(Funcionario f: funcionarioServico.selecionarTodosFuncionarios()){
                if(funcionarioNome.equals(f.getNome())){
                    funcionario.setId_fun(f.getId_fun());
                }
            }
            Ficha ficha = new Ficha();
            ficha.setId_ficha(Integer.parseInt(txtID.getText()));
            ficha.setCliente(cliente);
            ficha.setFuncionario(funcionario);
            ficha.setData_inicio(txtDataInicio.getText());
            ficha.setData_termino(txtDataTermino.getText());

            JOptionPane.showMessageDialog(this, fichaServico.editarFicha(ficha));
            limparCampos();

        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor" + erro.getMessage());
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFicha fichaServico =(InterfaceFicha) conexao.lookup("ficha");
            JOptionPane.showMessageDialog(this, fichaServico.excluirFicha(Integer.parseInt(txtID.getText())));
            limparCampos();
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }
 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ListaFicha listaFicha = new ListaFicha();
        getParent().add(listaFicha);
        listaFicha.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        if(!txtID.getText().equals("")){
            Registry conexao;
            try{
                conexao = LocateRegistry.getRegistry(ip,1100);
                InterfaceFicha fichaServico =(InterfaceFicha) conexao.lookup("ficha");
                int digitado = Integer.parseInt(txtID.getText());
                for(Ficha ficha : fichaServico.selecionarFicha(digitado)){
                    if(digitado == ficha.getId_ficha()){
                        jComboBox1.setSelectedItem(ficha.getCliente().getNome());
                        jComboBox2.setSelectedItem(ficha.getFuncionario().getNome());
                        txtDataInicio.setText(ficha.getData_inicio());
                        txtDataTermino.setText(ficha.getData_termino());
                    }
                }
            }catch (RemoteException erro){
                System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
            }catch(NotBoundException erro){
                System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
            }
        }
     
    }//GEN-LAST:event_txtIDActionPerformed

    private void jcbHabilitarEdicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbHabilitarEdicaoActionPerformed
        if(jcbHabilitarEdicao.isSelected()){
            txtID.setEditable(true);
        }else{
            txtID.setEditable(false);
            limparCampos();
        }

    }//GEN-LAST:event_jcbHabilitarEdicaoActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
      
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void btnExerciciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExerciciosActionPerformed
         ManipularFichaExercicio manipularFichaExercicio = new ManipularFichaExercicio();
         getParent().add(manipularFichaExercicio);
         manipularFichaExercicio.setVisible(true);
    }//GEN-LAST:event_btnExerciciosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExercicios;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox jcbHabilitarEdicao;
    private javax.swing.JTextField txtDataInicio;
    private javax.swing.JTextField txtDataTermino;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        txtID.setText("");
        txtDataInicio.setText("");
        txtDataTermino.setText("");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
    }
    
    public void carregarClientes(){
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceCliente clienteServico =(InterfaceCliente) conexao.lookup("cliente"); 

            for(Cliente c: clienteServico.selecionarTodosClientes()){
                jComboBox1.addItem(c.getNome());
            }
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        } 
    }
    
    public void carregarFuncionarios(){
        Registry conexao;
        try{
            conexao = LocateRegistry.getRegistry(ip,1100);
            InterfaceFuncionario funcionarioServico =(InterfaceFuncionario) conexao.lookup("funcionario"); 

            for(Funcionario f: funcionarioServico.selecionarTodosFuncionarios()){
                jComboBox2.addItem(f.getNome());
            }
        }catch (RemoteException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        }catch(NotBoundException erro){
            System.out.println("Erro de conexao com o servidor : " + erro.getMessage());
        } 
    }
}
